"""
Student Name: Callum Little
Student Number: 201775475
Class: Advanced Topics in Software Engineering
Assignment: Hello World! GA Implementation
"""


import random as r
import sys
from timeit import default_timer
import operator



#_________________________________Parameters____________________________________


letters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ! .'

# I used this string for simplicity. Could use ASCII table instead...

pop_size = 100     # Desired population size
generations = 10  # Generations to iterate over 
target_string = "Hello World!"
length_target = len(target_string)
bound_for_search = 7 # Lowest acceptable fitness for the best guess



#_________________________________Population____________________________________

def new_word(target_length): 
    """
    Generates a random string from letters which is the same length as the
    target word.
    """ 
            
    return ''.join(r.choice(letters) for _ in range(length_target))


def initial_pop(poulation, length):
    """
    Creates a list of words with the desired number of elements.
    """

    return [new_word(length) for i in range(pop_size)]
    


   
#____________________________________Fitness____________________________________

# This is only used to display the fittest value generated by the random search 
# function. It has no other use apart from that.

def calc_fitness(guess, target):
    """
    Compares the guess with the target. The score given is how many letters of 
    the guess are in the correct position compared to the target. 0 is the 
    lowest score and len(target) is the highest.
    """
    return sum(1.0 for expected, actual in zip(target, guess)
               if expected == actual)
               

def display_best(population, target):
    """
    Selects the first string from the list and prints out the statement. 
    """
    fit = fitness_function(population, target)
    ordered = sorted(fit, key=operator.itemgetter(1), reverse = True)
    print "Example of a Fittest Word From This Generation:", ordered[0], "\n"
    return


def fitness_function(population, target):
    """
    Iterates calc_fitness through the population and outputs a 
    list of arrays containing the guess and its score.
    """
    
    word_fitness = []
    for i in population:    
        fitness = calc_fitness(i, target)    
        word_fitness.append((i, fitness))   
    return word_fitness




#________________________________Selection______________________________________
        
# This would be used instead of a tournament to select only the n fittest of the 
# population for use as parents.

def selection(population, n):
    """
    Inputs the fintess list and the desired number of winners and then sorts 
    this list from fittest to weakest. It then selects the elements in the list 
    upu ntil n.
    """
    r.shuffle(population)
    fittest = population[:n]
    
    return fittest
    


#________________________________Iteration__________________________________


def random_search_1(target, size,  length, generations, criteria):
    """
    Initializes the population using initial_pop(). Then for a specified number 
    of generations the function then continues to generate new populations until
    a string in the population has a fitness value above the "Bound for Search".
    It also displays the best match in every generation. 
    
    The function stops at the last specified generation if the target phrase has
    not been generated. 
    """
    
    start = default_timer()
    population = initial_pop(size, length)  
    i = 0
    while i < generations:
        print "Generation: ", str(i)
        population = initial_pop(size, length)                
        display_best(population, target)                  
        i += 1
        
        j = 0
        while j < len(population):
            fitness = fitness_function(population,target)
            fit = fitness[j][1]
            if fit > criteria:            
                print "Best Guess:", '"{}"'.format(fitness[j][0]), "|", str(i), "Generations,", default_timer()-start, "seconds."
                sys.exit() 
            j += 1      
    print "Target Not Reached in", generations, "Generations.", "Time Taken:", default_timer()-start, "seconds."
    return




def random_search_2(target, size,  length, criteria):
    """
    Initializes the population using initial_pop(). Then the function then 
    continues to generate new populations until a phrase in the population has a 
    fitness value above the "Bound for Search". It also displays the best match 
    in every generation.     
    """
    
    start = default_timer()
    population = initial_pop(size, length)    
    i = 0
    for string in population:
        while string != target:
            print "Generation:", str(i)
            population = initial_pop(size, length)
            display_best(population, target) 
            
            j = 0       
            while j < len(population):
                fitness = fitness_function(population,target)
                fit = fitness[j][1]
                if fit > bound_for_search:
                    print "Best Guess:", '"{}"'.format(fitness[j][0]), "|", str(i), "Generations,", default_timer()-start, "seconds."
                    sys.exit() 
                j += 1                    
            i += 1                 
    return 


#___________________________________RUN_________________________________________

"""
You can uncomment the algorithm that you wish to run. The first is the 
generation-dependant algorithm, the second continues to run until completion. 
"""

#random_search_1(target_string, pop_size, length_target, generations, bound_for_search)

random_search_2(target_string, pop_size, length_target, bound_for_search)




